package com.mycompany.pm2.aufgabenblatt._a1;

import com.google.common.base.Preconditions;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.Collection;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * This file was generated by ChatGPT.
 * @author jan-ole
 */

public class PM2MapTest {
    
    private PM2Map<String,Integer> map;

    @BeforeEach
    public void setUp() {
        map = new PM2Map<>();
    }

    @AfterEach
    public void tearDown() {
        map = null;
    }

    @Test
    public void testSizeAndIsEmpty_onNewMap() {
        assertEquals(0, map.size(), "new map should have size 0");
        assertTrue(map.isEmpty(), "new map should be empty");
    }
    
    @Test
    public void testPutAndGet_andSize() {
        Integer prev = map.put("a", 1);
        assertNull(prev, "put on new key returns null");
        assertEquals(1, map.size());
        assertFalse(map.isEmpty());
        assertEquals(1, map.get("a"));
        
        // overwrite
        prev = map.put("a", 2);
        assertEquals(1, prev.intValue(), "put on existing key returns old value");
        assertEquals(2, map.get("a"), "value should be overwritten");
        assertEquals(1, map.size(), "size should not change when overwriting");
    }
    
    @Test
    public void testPutNullKey_throwsNPE() {
        assertThrows(NullPointerException.class, () -> map.put(null, 5));
    }
    
    @Test
    public void testContainsKeyAndContainsValue() {
        assertFalse(map.containsKey("x"));
        assertFalse(map.containsValue(99));
        map.put("x", 99);
        assertTrue(map.containsKey("x"));
        assertTrue(map.containsValue(99));
    }
    
    @Test
    public void testRemove_existingAndNonExisting() {
        map.put("k1", 10);
        map.put("k2", 20);
        map.put("k3", 30);
        map.put("k4", 40);
        assertEquals(4, map.size());
        
        Integer removed = map.remove("k2");
        assertEquals(20, removed.intValue());
        assertFalse(map.containsKey("k2"));
        assertEquals(3, map.size());
        
        // removing again returns null and size unchanged
        assertNull(map.remove("k2"));
        assertEquals(3, map.size());
    }
    
    @Test
    public void testPutAllAndClear() {
        HashMap<String,Integer> other = new HashMap<>();
        other.put("one", 1);
        other.put("two", 2);
        map.putAll(other);
        
        assertEquals(2, map.size());
        assertEquals(1, map.get("one"));
        assertEquals(2, map.get("two"));
        
        map.clear();
        assertEquals(0, map.size());
        assertTrue(map.isEmpty());
    }
    
    @Test
    public void testEntrySet() {
        PM2Map<String, String> map = new PM2Map<>();
        map.put("name", "Alice");
        map.put("city", "Paris");
        Set<Map.Entry<String, String>> entries = map.entrySet();
        assertEquals(2, entries.size());
        assertTrue(entries.stream().anyMatch(e -> e.getKey().equals("name") && e.getValue().equals("Alice")));
        assertTrue(entries.stream().anyMatch(e -> e.getKey().equals("city") && e.getValue().equals("Paris")));
    }
}